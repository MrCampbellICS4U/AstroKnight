package culminating;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.util.ArrayList;

public class ScrollingPlatformer implements ActionListener {
	
	//get everythign
	JFrame frame;
	DrawingPanel panel;
	
	Timer timer;
	int timeSpeed = 10;
	
	Player player;
	Level level1, level2, level3, level4;
	
	boolean up, left, right, space;
	int frameCounter = 0;
	
	int levelCounter = 0;
	ArrayList<Level> levels = new ArrayList<Level>();
	
	BufferedImage astronaut, bkImage;
	//The Sprite sheet has 7 rows of sprites, each consisting of 14 frames.
	//Each sprite is 64x64 pixels.
	int spriteW = 16;
	int spriteH = 16;
	int spriteRows = 2;
	int spriteCols = 14;
	int currentSprite = 0;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new ScrollingPlatformer();
			}
		});
	}
	
	ScrollingPlatformer() { //make evrything appear
		frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.addKeyListener(new ArrowKeyListener());
		frame.setResizable(false);
		
		panel = new DrawingPanel();
		panel.setPreferredSize(new Dimension(1280, 720)); 
		panel.setBackground(Color.black);
		
		astronaut = loadImage("/Testing.png");
		//bkImage= loadImage("/Astronaut-Sheet.png");

		level1 = new Level();

		level1.addPlatform(-4, 700, 196, 20);
		level1.addPlatform(400, 650, 300, 20);
		level1.addPlatform(740, 550, 250, 20);
		level1.addPlatform(1100, 550, 250, 20);
		level1.addPlatform(1450, 550, 50, 20);
		level1.addPlatform(1600, 550, 50, 20);
		level1.addPlatform(1750, 550, 50, 20);
		level1.addPlatform(1850, 450, 400, 20);
		level1.addPlatform(2400, 300, 100, 20);
		level1.addPlatform(2550, 200, 200, 20);
		level1.addPlatform(3100, 700, 200, 20);

		//staircase
		level1.addPlatform(3400, 600, 50, 600);
		level1.addPlatform(3500, 500, 50, 600);
		level1.addPlatform(3600, 400, 50, 600);
		level1.addPlatform(3700, 300, 50, 600);

		// elevator
		level1.addPlatform(4120, 650, 50, 50);
		level1.addPlatform(4220, 550, 50, 50);
		level1.addPlatform(4320, 450, 50, 50);
		level1.addPlatform(4420, 350, 50, 50);
		level1.addPlatform(4100, 200, 300, 50);
		level1.addPlatform(4500, 200, 600, 50);

		level1.setScrollStop();

		level1.addHazard(460, 600, 30, 30);
		level1.addHazard(600, 600, 30, 30);
		level1.addHazard(1025, 500, 30, 30);
		
		// falling out the map hazard
		level1.addHazard(0, 750, 1280 + level1.scrollStop, 50);
		
		level2 = new Level();
		
		level2.addPlatform(-4, 704, 196, 20);
		level2.addPlatform(388, 660, 189, 65);
		level2.addPlatform(580, 520, 188, 34);
		level2.addPlatform(399, 380, 161, 32);
		level2.addPlatform(592, 230, 219, 34);
		level2.addPlatform(938, 232, 106, 104);
		level2.addPlatform(1143, -6, 137, 247);
		level2.addPlatform(1033, 564, 122, 162);
		level2.addPlatform(1307, 564, 122, 162);
		level2.addPlatform(1600, 470, 300, 30);
		level2.addPlatform(2100, 400, 200, 880);
		level2.addPlatform(2100, 0, 200, 200);
		
		level2.setScrollStop();
		
		level2.addHazard(576, 680, 467, 50);
		level2.addHazard(1144, 612, 163, 113);
		level2.addHazard(0, 750, 1280 + level2.scrollStop, 50);
		
		level3 = new Level();
		level3.addPlatform(-4, 704, 500, 20);
		level3.addHazard(0, 0, 50, 50);
		
		level3.setScrollStop();
		
		level4 = new Level();
		level4.addPlatform(-4, 704, 196, 20);
		level4.addHazard(0, 0, 50, 50);
		
		level4.setScrollStop();
		
		levels.add(level1);
		levels.add(level2);
		levels.add(level3);
		levels.add(level4);

		player = new Player(50, 650, 50, 50, level1);
		
		timer = new Timer(timeSpeed, this);
		
		frame.setContentPane(panel);
		frame.pack();
		frame.setVisible(true);
		
		timer.start();
		
	}
	
	public void actionPerformed(ActionEvent e) {//every frame
		
		player.move();
		player.gravity();
		player.jump();
		player.attack();
		if (player.checkWin()) {
			levelCounter++;
			player.currentLevel = levels.get(levelCounter);
			player.respawn();
		}
		if (player.checkDeath()) player.respawn();
		panel.repaint();
	}
	
	private class DrawingPanel extends JPanel {

		public void paintComponent(Graphics g) { //paint
			super.paintComponent(g);
			Graphics2D g2 = (Graphics2D)g;
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			
			g2.setColor(Color.white);
			for (Rectangle r: player.currentLevel.getPlatforms()) g2.fillRect(r.x, r.y, r.width, r.height); 
			
			
			// Update the sprite index for walking animation
			if (player.right) {
				currentSprite++;
				if (currentSprite >= 1 * spriteCols) { // if its the last image of the sprite, restart the sprite
					currentSprite = 0;
				}
			}
			// Update the sprite index for walking animation
			if (player.left) {
				currentSprite++;
				if (currentSprite >= 2 * spriteCols) { // if its the last image of the sprite, restart the sprite
					currentSprite = 15;
				}
			}

			if (!player.left && !player.right) {
				currentSprite = 0;
			}
			
			// Calculate the position and size of the current sprite
			int spriteX = (currentSprite % spriteCols) * spriteW; 
			int spriteY = (currentSprite / spriteCols) * spriteH;

			/*
			 * player.x + player.width, player.y + player.height: bottom-right corner of player's coordinate and top-left corner to specify the size of destiantion rectangle (rectangle size)
			 * spriteX, spriteY: The top-left coordinates of the first image of the sprite sheet. Coordinates determine which part of the sprite sheet will be drawn. (which frame)
			 * spriteX + spriteW, spriteY + spriteH: The bottom-right coordinates of the source rectangle within the sprite sheet. With the top-left coordinates, this specifies the size of the source rectangle. (image size)
			 */
			// Draw the current sprite
			g2.drawImage(astronaut, player.x, player.y, player.x + player.width, player.y + player.height,
					spriteX, spriteY, spriteX + spriteW, spriteY + spriteH, null);
			g2.drawRect(player.x, player.y, player.width, player.height);
			
			//g2.drawImage(bkImage, 0, 0, this);
			
			if (player.attacking) {
				g2.setColor(Color.cyan);	
				g2.fillRect(player.swordHitbox.x, player.swordHitbox.y, player.swordHitbox.width, player.swordHitbox.height);
			}
			
			g2.setColor(Color.red);
			for (Rectangle r: player.currentLevel.getHazards()) g2.fillRect(r.x, r.y, r.width, r.height);
			
			g2.drawString(String.valueOf(player.y), 50, 50);
			g2.drawString(String.valueOf(player.globalX), 80, 50);
			g2.drawString(String.valueOf(player.cooldownTimer), 120, 50);
			
			if (player.checkCollision()) g2.fillRect(100, 100, 100, 100);
			
		}
	}
	
	public class ArrowKeyListener extends KeyAdapter {
		
		public void keyReleased(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_LEFT) player.left = false;
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) player.right = false;
			if (e.getKeyCode() == KeyEvent.VK_UP) player.up = false;
			if (e.getKeyCode() == KeyEvent.VK_SPACE) player.space = false;
		}
		
		public void keyPressed(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_LEFT) player.left = true;
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) player.right = true;
			if (e.getKeyCode() == KeyEvent.VK_UP) player.up = true;
			if (e.getKeyCode() == KeyEvent.VK_SPACE) player.space = true;
		}
	}
	
	/**
	 * Loads an image from a file in the resource folder
	 * @param filename	The name of the file
	 * @return	Returns a BufferedImage connected to filename
	 */
	BufferedImage loadImage(String filename) {
		BufferedImage image = null;	
		java.net.URL imageURL = this.getClass().getResource(filename);
		if (imageURL != null) {
			try {
				image = ImageIO.read(imageURL);
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else { 
			JOptionPane.showMessageDialog(null, "An image failed to load: " + filename , "ERROR", JOptionPane.ERROR_MESSAGE);
		}
		return image;
	}


}
